SpringBoot Therotical Notes:

28-08-2024:
* ArrayList :-
1] The ArrayList class in Java is a widely used implementation of the List interface.
2] Dynamic Sizing: Unlike arrays, which have a fixed size, ArrayList can dynamically adjust its size. When elements are added or removed, ArrayList automatically resizes itself,
which simplifies the management of collections of objects.
3] Fast Access: ArrayList provides fast access to elements by index. The underlying data structure is an array, so it supports constant-time complexity, O(1), for retrieving elements by index.

4] Flexible Data Management: ArrayList supports various methods for adding, removing, and manipulating elements, such as add(), remove(), get(), set(), and more. 
This flexibility makes it a convenient choice for managing lists of objects.
5] Preservation of Order: Elements in an ArrayList maintain their insertion order, which is useful when you need to preserve the order of items as they are added.
6] Versatility: ArrayList can hold any type of object, including custom objects, and can be used in various contexts such as data storage, data processing, and user interface elements.

# Key Characteristics
1] Implementation: ArrayList is backed by an array. When the array is full and more elements need to be added, a new, larger array is created, and the existing elements are copied over.

2] Capacity: ArrayList has an initial capacity but can grow as needed. This capacity is automatically adjusted by the list as more elements are added.

3] Performance: Operations like add(), get(), and set() are generally fast. However, adding or removing elements from the middle of the list can be slower, as elements need to be shifted.

# When to Use ArrayList
1] When you need a resizable array and want to efficiently manage a collection of objects.
2] When you frequently access elements by index but donâ€™t need to insert or remove elements frequently in the middle of the list.
3] When you want to maintain the order of elements as they are added.

* Enum :-
1]In Java, an enum (short for "enumeration") is a special data type that defines a collection of constants. It provides a way to define a set of named values that represent a specific category
or set of options. Enums are useful when you have a fixed number of related constants, such as days of the week, directions, or status codes.
2] Enums are a powerful feature in Java that help in organizing and managing a fixed set of related constants, making code more readable and maintainable.

# Key Points about Enums:
1] Fixed Set of Constants: Enums are ideal when you need to represent a fixed set of constants, such as the days of the week or directions.

2] Type Safety: Enums provide type safety, meaning you can only use the defined constants in the enum, reducing the chances of errors.

3] Methods and Fields: Enums can have fields, methods, and constructors. Each constant in the enum is an instance of the enum type.

4] Iterating Over Enum Values: You can iterate over the constants of an enum using the values() method.
